Gumazon:
  name: gumazon
  version: 0.1.0

  data:
    title: Gumazon where you can buy, sell product or service, locally or across the world.
    sitemap:
      buy: /ads
      sell: /ads
      auth: /auth
      about: /about   # contact|privacy|legal

  #  method: GET
  #  path: /watch?v=3WD485nMbxc
  api:
    public:
      - action: index
        input:
          method: GET
          path: /
        output:
          json: { data }

      - action: show
          input:
            method: GET
            path: /{ id }
            query: ?q={ id }
          output:
            json: { selected_item }

      - action: search
          input:
            method: GET
            path: /search
            query: ?q={ term }
          output:
            json: { term_matches }

    secure:
        - action: save
          input:
            method: POST
            path: /
            params: sitemap[key] = value
          output:
            json: { data }

        - action: update
          input:
            method: PUT
            path: /{ id }
            params: { data }
          output:
            json: { data }

        - action: patch
          input:
            method: PATCH
            path: /{ id }
            params: { data }
          output:
            json: { data }

        - action: delete
          input:
            method: DELETE
            path: /
            params: {id}
          output:
            json: {data}


application:
  version: '0.1.0'

  input:
    load: import gumazon
    uri: gumazon
    url: GET

  data:
    model: Ad ad
    constraints:
      title:
        nullable: false
      description:
        nullable: false
      category:
        nullable: false
        blank: false
        maxSize: 128
      geoLocation:
        nullable: true
      adStatus:
        nullable: false
      approvalDate:
        nullable: true
      expiryDate:
        nullable: true

  output:
    buy: com.gumazon.api.Ad get
    sell: com.gumazon.api.Ad post **kwargs

ads:
  version: '0.1.0'

  input:
      load: import __com_package_api__.Ad
      url: GET __com_package_api__/ad

  data:
    model:
      id: str
      title: MultiLanguageString
      description: MultiLanguageString
      category: str
      geoLocation: str
      adStatus: AdStatus
      approvalDate: Date
      expiryDate: Date
      media: List[Media]
      tags: List[Tag]
      constraints:
          title:
              nullable: false
          description:
              nullable: false
          category:
              nullable: false
              blank: false
              maxSize: 128
          geoLocation:
              nullable: true
          adStatus:
              nullable: false
          approvalDate:
              nullable: true
          expiryDate:
              nullable: true

    view:
      show:
        id: ad.id
        title: tmpl.'/multiLanguageString/multiLanguageString'(ad.title)
        description: tmpl.'/multiLanguageString/multiLanguageString'(ad.description)
        category: ad.category
        geoLocation: ad.geoLocation
        adStatus: ad.adStatus
        approvalDate: ad.approvalDate
        expiryDate: ad.expiryDate
        media: tmpl.'/media/media'(ad.media)
        tags: tmpl.'/tag/tag'(ad.tags)
      index:
        - { ad }

    controller:
      index:
        input:
          method: GET
          path: /ads
        output:
          json: { Ad.data.view.index }
        public: 1

      show:
          input:
            method: GET
            path: /ads/{ id }
          output:
            json: { Ad.data.view.show }
          public: 1

      search:
          input:
            method: GET
            path: /ads/search
            query: ?q={ term_in_ad_title }
          output:
            json: { Ad.data.view.index term_in_ad_title }
          public: 1

      save:
        input:
          method: POST
          path: /ads
          params: { new_ad }
        output:
          json: { Ad.data.view.index }
        public: 0

      update:
        input:
          method: PUT
          path: /ads/{ id }
          params: { updated_ad }
        output:
          json: { Ad.data.view.show {id} }
        public: 0

      patch:
        input:
          method: PATCH
          path: /ads/{ id }
          params: { kwargs }
        output:
          json: { Ad.data.view.show {id} }
        public: 0

      delete:
        input:
          method: DELETE
          path: /ads
          params: { id }
        output:
          json: { Ad.data.view.index }
        public: 0

  output: { Ad.data.view.index }


translations:
  namespace: Translation
  name: translation
  version: '0.1.0'

  input:
    load: import translation.Translation
    url: GET __com_package_api__/media

  data:
    model: Media media

  output:
    id:         media.id
    url:         media.url
    title:       tmpl.'/multiLanguageString/multiLanguageString'(media.title)
    description: tmpl.'/multiLanguageString/multiLanguageString'(media.description)



- settings:
    namespace: MultiLanguageString
    name: multiLanguageString
    resource: multiLanguageStrings
    version: '0.1.0'
    url:
      base: 'http://localhost'
      api: {settings_url_base}/api
      endpoint: {settings_url_api}/{settings_resource}

  on:
    module:
      entrypoint:
      endpoint: {settings_name}.{settings_namespace}
      cmd: import multiLanguageString.MultiLanguageString
    url:
      entrypoint:
      endpoint: { settings_url_endpoint }
      cmd: GET http://localhost/api/multiLanguageStrings

  data:
    model:
      id: int # multiLanguageString.id
      content: str  # multiLanguageString.getContent(locale.getLanguage())
      languageTag: str  # multiLanguageString.languageTag
      defaultLanguageString: str  # multiLanguageString.content
      translations: List[Translation]
      constraints:
        languageTag:
          nullable: false
      mapping:
        translations:
          cascade: "all-delete-orphan"

    view:
      show:
        id: multiLanguageString.id
        content: multiLanguageString.getContent(locale.getLanguage())
        languageTag: multiLanguageString.languageTag
        defaultLanguageString: multiLanguageString.content
      index:
        - { view.show }

    controller:
      index:
        input:
          method: GET
          path: /multiLanguageStrings
        output:
          json: { data.view.index }
        public: 1

      show:
        input:
          method: GET
          path: /multiLanguageStrings/{ id }
        output:
          json: { data.view.show }
        public: 1

      search:
        input:
          method: GET
          path: /multiLanguageStrings/search
          query: ?q={ term_in_ad_title }
        output:
          json: { data.view.index term_in_ad_title }
        public: 1

      save:
        input:
          method: POST
          path: {settings_url_endpoint}
          params: { new_ad }
        output:
          json: { data.view.index }
        public: 0

      update:
        input:
          method: PUT
          path: /{input_url}/{ id }
          params: { updated_ad }
        output:
          json: { data.view.show { id } }
        public: 0

      patch:
        input:
          method: PATCH
          path: /{input_url}/{ id }
          params: { kwargs }
        output:
          json: { data.view.show { id } }
        public: 0

      delete:
        input:
          method: DELETE
          path: /{input_url}
          params: { id }
        output:
          json: { data.view.index }
        public: 0


    output: { data.view.index }

  output:
    id:                      multiLanguageString.id
    content:                 multiLanguageString.getContent(locale.getLanguage())
    languageTag:             multiLanguageString.languageTag
    defaultLanguageString:   multiLanguageString.content



medias:
  namespace: MultiLanguageString
  name: multiLanguageString
  version: ''

  input:
    load: import __com_package_api__.Media
    url: GET __com_package_api__/media

  data:
    model: Media media

  output:
    id:         media.id
    url:         media.url
    title:       tmpl.'/multiLanguageString/multiLanguageString'(media.title)
    description: tmpl.'/multiLanguageString/multiLanguageString'(media.description)
